你是一位经验丰富的软件工程师。
你的代码质量很高，可读性强，易于维护，遵循了良好的代码规范，有详细的注释（主要以中文书写）。
你的代码有很高的鲁棒性，充分考虑到了可能遇到的各种异常情况并对每种情况都做了处理，包括但不限于空指针、数组越界、类型转换错误、IO异常等。
你的代码在性能方面也有良好的表现，能够高效地处理大量数据。
你的代码在各个关键步骤上都有日志输出，以便在出现问题时能够快速定位问题。

你将根据我提供的代码和新的需求，编写一段代码，并确保这段代码符合上述要求。

你编写这段代码的最终目的是：

[[[
编写一个带图形界面的工具，这个工具可以列出一个文件夹下的所有文本文件，并且可以选择一个文本文件查看其内容。
工具界面布局如下：
首先是上下布局，上部是一个目录输入框，下部是一个左右结构的子布局。
目录输入框右侧有个按钮可以选择打开哪个目录，当前打开的目录路径会在目录输入框里显示。
下部的左右结构如下：
左边是当前打开的目录中所有文本文件的列表，以文件名为条目显示，条目按文件的创建时间排序，条目可以点击选择当前选中条目，当前选中条目会高亮。刚打开一个新目录时没有当前选中条目。
右边是当前选中的文本文件的内容，如果当前没有选中任何文本文件，则显示一个提示信息。
文件列表和文件内容两部分都会在其内容超过当前视图高度时显示滚动条，可以滚动查看。

考虑这样的python对象：
【【【
class ImageDescriptor:
    def __init__(self, unique_images: Set[Path], similar_groups: List[List[Path]]):
        self.unique_images = unique_images
        self.similar_groups = similar_groups

    def serialize(self, filepath: str):
        """将描述信息保存为文本文件"""
        print(f"Saving description to {filepath}")
        with open(filepath, 'w') as file:
            file.write("Unique Images:\n")
            for image in self.unique_images:
                file.write(f"{image.name}\n")
            file.write("\nSimilar Groups:\n")
            for group in self.similar_groups:
                file.write(f"Group:\n")
                for image in group:
                    file.write(f"{image.name}\n")
                file.write("\n")
】】】
它序列化的文本文件内容是这样的：
【【【
Unique Images:
ab.jpg
p.jpg
bi.jpg

Similar Groups:
Group:
k.jpg
af.jpg
bn.jpg
cd.jpg
a.jpg
bw.jpg

Group:
k.jpg
cd.jpg
bd.jpg

Group:
aq.jpg
am.jpg
】】】
我需要这个程序在打开目录时，自动识别哪些文本文件是这个对象的序列化文件，然后只在左侧列表展示序列化文件，剔除掉其他文件。
同时，需要在点击左侧列表的条目时，自动反序列化一个该对象，留待后续增加的需求使用。
工具需要使用python编写。
]]]

你会在以下代码（基础代码）的基础上做修改来实现新的需求：

[[[
import sys
import os
import logging
from PyQt5.QtWidgets import QApplication, QWidget, QVBoxLayout, QHBoxLayout, QLineEdit, QPushButton, QFileDialog, QScrollArea, QLabel, QGridLayout, QSizePolicy
from PyQt5.QtGui import QPixmap
from PyQt5.QtCore import Qt, QSize, QTimer

# 配置日志
logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')

class ImageGallery(QWidget):
    def __init__(self):
        super().__init__()
        self.spacing = 10
        self.image_width = 256
        self.image_height = 256
        self.pixmaps = {}
        self.timer = QTimer(self)
        self.timer.timeout.connect(self.handleResizeAfterUpdate)  # 连接超时信号到处理函数

        self.initUI()

    def initUI(self):
        # 主布局
        mainLayout = QVBoxLayout()
        self.setLayout(mainLayout)

        # 顶部布局：目录输入与选择按钮
        topLayout = QHBoxLayout()
        mainLayout.addLayout(topLayout)
        self.directoryInput = QLineEdit()
        self.directoryInput.setPlaceholderText("请输入或选择一个目录...")
        topLayout.addWidget(self.directoryInput)
        self.openButton = QPushButton("打开")
        self.openButton.clicked.connect(self.openDirectory)
        topLayout.addWidget(self.openButton)

        # 图片显示区域
        self.scrollArea = QScrollArea()
        # 给self.scrollArea添加背景色
        # self.scrollArea.setStyleSheet("background-color: lightblue;")

        self.scrollArea.setWidgetResizable(True)
        mainLayout.addWidget(self.scrollArea)

        self.imageContainer = QWidget()
        # 给self.imageContainer添加背景色
        # self.imageContainer.setStyleSheet("background-color: lightgreen;")

        self.imageLayout = QGridLayout()
        self.imageLayout.setHorizontalSpacing(self.spacing)  # 使用变量设置列间隔
        self.imageLayout.setVerticalSpacing(self.spacing)    # 使用变量设置行间隔
        self.imageLayout.setAlignment(Qt.AlignTop | Qt.AlignLeft)
        self.imageLayout.setContentsMargins(0, 0, 0, 0)

        self.imageContainer.setLayout(self.imageLayout)
        self.scrollArea.setWidget(self.imageContainer)

        self.setWindowTitle('图片浏览器')
        self.setGeometry(100, 100, 800, 600)
        self.show()

    def openDirectory(self):
        dir_path = QFileDialog.getExistingDirectory(self, "选择文件夹")
        if dir_path:
            self.directoryInput.setText(dir_path)
            self.loadImages(dir_path)

    def loadImages(self, dir_path):
        logging.info(f"加载目录 {dir_path} 中的图片")
        
        image_files = [f for f in os.listdir(dir_path) if f.lower().endswith(('.png', '.jpg', '.jpeg', '.bmp', '.gif'))]
        if not image_files:
            logging.warning("选定的目录没有图片文件")
            return
        self.pixmaps = {}
        for filename in image_files:
            image_path = os.path.join(dir_path, filename)
            pixmap = QPixmap(image_path).scaled(self.image_width, self.image_height, Qt.KeepAspectRatio, Qt.SmoothTransformation)
            self.pixmaps[filename] = pixmap

        self.displayImages(self.imageContainer.frameSize().width())

    def displayImages(self, width):

        image_size_with_spacing = self.image_width + self.spacing  # 图片大小加上间隔
        num_columns = max(1, width // image_size_with_spacing)  # 计算每行的图片数量

        row, col = 0, 0
        for name, pixmap in self.pixmaps.items():
            label = QLabel()
            label.setPixmap(pixmap)
            label.setFixedSize(self.image_width, self.image_height)
            label.setScaledContents(True)
            self.imageLayout.addWidget(label, row, col)
            label.setToolTip(name)  # 显示文件名不含扩展名

            col += 1
            if col >= num_columns:  # 换行
                row += 1
                col = 0
            # logging.debug(f"显示图片：{filename}")

        # 在添加完所有标签后，设置列的伸缩因子
        for col in range(num_columns):  # 假设num_columns是你期望的列数
            self.imageLayout.setColumnStretch(col, 0)
                
    def resizeEvent(self, event):
        """
        重写 resizeEvent 方法来处理窗口大小变化事件。
        """
        # 清除现有的图片
        for i in reversed(range(self.imageLayout.count())): 
            self.imageLayout.itemAt(i).widget().setParent(None)

        self.timer.setInterval(200)
        self.timer.start()
        # 安排一个新的定时器来执行 handleResizeAfterUpdate
        super().resizeEvent(event)


    def handleResizeAfterUpdate(self):
        """
        处理窗口大小改变后的操作。
        """
        print(type(self.imageContainer.frameSize()))
        margin = self.imageContainer.contentsMargins().left()
        width = self.imageContainer.frameSize().width() - margin
        print(f"窗口宽度：{width}, margin: {margin}")
        self.displayImages(width)
        self.timer.stop()

if __name__ == "__main__":
    app = QApplication(sys.argv)
    ex = ImageGallery()
    sys.exit(app.exec_())

]]]

新的需求是：

[[[
右侧区域显示当前选中的描述文件里记录的图片，规则如下：
1、显示标题“唯一图片”，布局靠左。
2、显示Unique Images列表里的每张图片，按以下规则：
    a、图片缩放为256*256的大小显示。
    b、按矩阵排列，每行个数根据窗口大小动态调整，即窗口大小改变时每行显示数量也需要变化。
    c、图片之间需要有合适的间距，图片下方需要显示图片文件名称（不包括扩展名）
3、显示标题“重复图片组”，布局靠左。
4、显示Similar Groups列表里的每组图片，按以下规则：
    a、每组图片开始前显示次级标题“第N组”，其中N为当前组的编号，也靠左布局。
    b、显示这个组包含的所有图片，规则和上方第2条里的a、b、c要求一致。

需要注意的是描述文件里记录的都是图片文件都是和描述文件在同一目录。如果遇到读取失败或其他原因展示失败的图片，需要在图片位置显示一个红叉，并且图片名字的文字也显示为红色。
]]]

你只需要在上面代码的基础上做尽量少的修改来解决问题，对于可以不用修改的部分不进行修改。
不要试图删除基础代码中的注释和用于调试的日志输出，除非这是必要的。
最后，给我展示修改后用于替换基础代码的完整代码（最终代码），包括修改了的部分和未修改的部分。
给我的最终代码应当是完整可运行的。
最终代码不应该包含任何省略或指向性注释。
不应该包含类似于“...省略实现”、“...保持不变”、“与...相同”这样的注释来代替实际代码。